
===========================================================
title: [DIMACS10/chesapeake; 2011; unknown; ed: H. Meyerhenke]
status 0
key [2457] nrow 39 ncol 39
mkind 1 skind 1 asize 340 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 39 ncol 39 nnz 170 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


CAMD demo:

camd version 2.3, Jun 20, 2012:  approximate minimum degree ordering:
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes


Input matrix:  39-by-39, with 170 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to CAMD, since CAMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since CAMD ignores them.

Column: 0, number of entries: 11, with row indices in Ai [0 ... 10]:
    row indices: 6 7 10 11 12 21 22 33 34 36 38

Column: 1, number of entries: 11, with row indices in Ai [11 ... 21]:
    row indices: 6 7 8 10 11 12 21 22 34 35 38

Column: 2, number of entries: 7, with row indices in Ai [22 ... 28]:
    row indices: 13 14 15 16 17 35 38

Column: 3, number of entries: 4, with row indices in Ai [29 ... 32]:
    row indices: 16 35 36 38

Column: 4, number of entries: 4, with row indices in Ai [33 ... 36]:
    row indices: 5 33 34 38

Column: 5, number of entries: 3, with row indices in Ai [37 ... 39]:
    row indices: 6 34 38

Column: 6, number of entries: 7, with row indices in Ai [40 ... 46]:
    row indices: 7 8 10 11 12 34 38

Column: 7, number of entries: 10, with row indices in Ai [47 ... 56]:
    row indices: 8 9 19 20 21 22 23 34 37 38

Column: 8, number of entries: 4, with row indices in Ai [57 ... 60]:
    row indices: 9 34 35 38

Column: 9, number of entries: 3, with row indices in Ai [61 ... 63]:
    row indices: 34 35 38

Column: 10, number of entries: 4, with row indices in Ai [64 ... 67]:
    row indices: 18 34 35 38

Column: 11, number of entries: 6, with row indices in Ai [68 ... 73]:
    row indices: 18 25 34 35 37 38

Column: 12, number of entries: 4, with row indices in Ai [74 ... 77]:
    row indices: 34 35 37 38

Column: 13, number of entries: 7, with row indices in Ai [78 ... 84]:
    row indices: 24 25 26 27 28 35 38

Column: 14, number of entries: 8, with row indices in Ai [85 ... 92]:
    row indices: 18 24 25 26 27 28 35 38

Column: 15, number of entries: 4, with row indices in Ai [93 ... 96]:
    row indices: 18 26 35 38

Column: 16, number of entries: 2, with row indices in Ai [97 ... 98]:
    row indices: 35 38

Column: 17, number of entries: 8, with row indices in Ai [99 ... 106]:
    row indices: 18 24 25 26 28 31 35 38

Column: 18, number of entries: 4, with row indices in Ai [107 ... 110]:
    row indices: 32 35 37 38

Column: 19, number of entries: 3, with row indices in Ai [111 ... 113]:
    row indices: 35 37 38

Column: 20, number of entries: 4, with row indices in Ai [114 ... 117]:
    row indices: 32 35 37 38

Column: 21, number of entries: 10, with row indices in Ai [118 ... 127]:
    row indices: 26 27 29 30 31 32 34 35 37 38

Column: 22, number of entries: 7, with row indices in Ai [128 ... 134]:
    row indices: 29 31 32 34 35 37 38

Column: 23, number of entries: 3, with row indices in Ai [135 ... 137]:
    row indices: 35 37 38

Column: 24, number of entries: 3, with row indices in Ai [138 ... 140]:
    row indices: 35 37 38

Column: 25, number of entries: 3, with row indices in Ai [141 ... 143]:
    row indices: 35 37 38

Column: 26, number of entries: 4, with row indices in Ai [144 ... 147]:
    row indices: 29 35 37 38

Column: 27, number of entries: 3, with row indices in Ai [148 ... 150]:
    row indices: 35 37 38

Column: 28, number of entries: 3, with row indices in Ai [151 ... 153]:
    row indices: 35 37 38

Column: 29, number of entries: 3, with row indices in Ai [154 ... 156]:
    row indices: 35 37 38

Column: 30, number of entries: 4, with row indices in Ai [157 ... 160]:
    row indices: 31 35 37 38

Column: 31, number of entries: 3, with row indices in Ai [161 ... 163]:
    row indices: 35 37 38

Column: 32, number of entries: 3, with row indices in Ai [164 ... 166]:
    row indices: 35 37 38

Column: 33, number of entries: 1, with row indices in Ai [167 ... 167]:
    row indices: 36

Column: 34, number of entries: 2, with row indices in Ai [168 ... 169]:
    row indices: 35 36

Column: 35, number of entries: 0, with row indices in Ai [170 ... 169]:
    row indices:

Column: 36, number of entries: 0, with row indices in Ai [170 ... 169]:
    row indices:

Column: 37, number of entries: 0, with row indices in Ai [170 ... 169]:
    row indices:

Column: 38, number of entries: 0, with row indices in Ai [170 ... 169]:
    row indices:

return value from camd_order: 0 (should be 0)

camd:  approximate minimum degree ordering, results:
    status: OK
    n, dimension of A:                                  39
    nz, number of nonzeros in A:                        170
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       340
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              3224
    # of memory compactions:                            0

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 229
    nonzeros in L (including diagonal):                 268
    # divide operations for LDL' or LU:                 229
    # multiply-subtract operations for LDL':            902
    # multiply-subtract operations for LU:              1575
    max nz. in any column of L (incl. diagonal):        12

    chol flop count for real A, sqrt counted as 1 flop: 2072
    LDL' flop count for real A:                         2033
    LDL' flop count for complex A:                      9277
    LU flop count for real A (with no pivoting):        3379
    LU flop count for complex A (with no pivoting):     14661

Permutation vector:
  5 33 36  4 16  3  9  8 10 12 28 24 25 27 13 15 14 29 30 31 17 26 23 19 20 32 21 22  0  1  2  6  7 11 18 38 35 37 34

Inverse permutation vector:
 28 29 30  5  3  0 31 32  7  6  8 33  9 14 16 15  4 20 34 23 24 26 27 22 11 12 21 13 10 17 18 19 25  1 38 36  2 37 35

Execution of CAMD demo: OK
