
===========================================================
title: [AG-Monien/cage_G_04]
status 0
key [2436G4] nrow 30 ncol 30
mkind 1 skind 1 asize 90 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 30 ncol 30 nnz 45 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  30-by-30, with 45 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 3, with row indices in Ai [0 ... 2]:
    row indices: 15 16 17

Column: 1, number of entries: 3, with row indices in Ai [3 ... 5]:
    row indices: 18 19 20

Column: 2, number of entries: 3, with row indices in Ai [6 ... 8]:
    row indices: 21 22 23

Column: 3, number of entries: 3, with row indices in Ai [9 ... 11]:
    row indices: 15 18 21

Column: 4, number of entries: 3, with row indices in Ai [12 ... 14]:
    row indices: 15 24 25

Column: 5, number of entries: 3, with row indices in Ai [15 ... 17]:
    row indices: 18 26 27

Column: 6, number of entries: 3, with row indices in Ai [18 ... 20]:
    row indices: 21 28 29

Column: 7, number of entries: 3, with row indices in Ai [21 ... 23]:
    row indices: 16 19 22

Column: 8, number of entries: 3, with row indices in Ai [24 ... 26]:
    row indices: 16 26 28

Column: 9, number of entries: 3, with row indices in Ai [27 ... 29]:
    row indices: 19 24 29

Column: 10, number of entries: 3, with row indices in Ai [30 ... 32]:
    row indices: 22 25 27

Column: 11, number of entries: 3, with row indices in Ai [33 ... 35]:
    row indices: 17 20 23

Column: 12, number of entries: 3, with row indices in Ai [36 ... 38]:
    row indices: 17 27 29

Column: 13, number of entries: 3, with row indices in Ai [39 ... 41]:
    row indices: 20 25 28

Column: 14, number of entries: 3, with row indices in Ai [42 ... 44]:
    row indices: 23 24 26

Column: 15, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 16, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 17, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 18, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 19, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 20, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 21, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 22, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 23, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 24, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 25, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 26, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 27, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 28, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 29, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  30
    nz, number of nonzeros in A:                        45
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       90
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              3024
    # of memory compactions:                            0

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 120
    nonzeros in L (including diagonal):                 150
    # divide operations for LDL' or LU:                 120
    # multiply-subtract operations for LDL':            360
    # multiply-subtract operations for LU:              600
    max nz. in any column of L (incl. diagonal):        10

    chol flop count for real A, sqrt counted as 1 flop: 870
    LDL' flop count for real A:                         840
    LDL' flop count for complex A:                      3960
    LU flop count for real A (with no pivoting):        1320
    LU flop count for complex A (with no pivoting):     5880

Permutation vector:
 18 19 20  1 21 22 23  2 15 24 25  4 16 26 28  8 17 27 29 12  0  3  5  6  7  9 11 13 14 10

Inverse permutation vector:
 20  3  7 21 11 22 23 24 15 25 29 26 19 27 28  8 12 16  0  1  2  4  5  6  9 10 13 17 14 18

Execution of AMD demo: OK
