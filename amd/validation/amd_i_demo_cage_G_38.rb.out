
===========================================================
title: [AG-Monien/cage_G_38]
status 0
key [2436G38] nrow 50 ncol 50
mkind 1 skind 1 asize 350 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 50 ncol 50 nnz 175 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  50-by-50, with 175 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 7, with row indices in Ai [0 ... 6]:
    row indices: 1 2 3 4 5 6 7

Column: 1, number of entries: 6, with row indices in Ai [7 ... 12]:
    row indices: 8 9 10 11 12 13

Column: 2, number of entries: 6, with row indices in Ai [13 ... 18]:
    row indices: 14 15 16 17 18 19

Column: 3, number of entries: 6, with row indices in Ai [19 ... 24]:
    row indices: 20 21 22 23 24 25

Column: 4, number of entries: 6, with row indices in Ai [25 ... 30]:
    row indices: 26 27 28 29 30 31

Column: 5, number of entries: 6, with row indices in Ai [31 ... 36]:
    row indices: 32 33 34 35 36 37

Column: 6, number of entries: 6, with row indices in Ai [37 ... 42]:
    row indices: 38 39 40 41 42 43

Column: 7, number of entries: 6, with row indices in Ai [43 ... 48]:
    row indices: 44 45 46 47 48 49

Column: 8, number of entries: 6, with row indices in Ai [49 ... 54]:
    row indices: 14 20 26 32 38 44

Column: 9, number of entries: 6, with row indices in Ai [55 ... 60]:
    row indices: 15 21 27 33 39 45

Column: 10, number of entries: 6, with row indices in Ai [61 ... 66]:
    row indices: 16 22 28 34 40 46

Column: 11, number of entries: 6, with row indices in Ai [67 ... 72]:
    row indices: 17 23 29 35 41 47

Column: 12, number of entries: 6, with row indices in Ai [73 ... 78]:
    row indices: 18 24 30 36 42 48

Column: 13, number of entries: 6, with row indices in Ai [79 ... 84]:
    row indices: 19 25 31 37 43 49

Column: 14, number of entries: 5, with row indices in Ai [85 ... 89]:
    row indices: 21 28 35 42 49

Column: 15, number of entries: 5, with row indices in Ai [90 ... 94]:
    row indices: 20 29 36 43 46

Column: 16, number of entries: 5, with row indices in Ai [95 ... 99]:
    row indices: 24 26 37 41 45

Column: 17, number of entries: 5, with row indices in Ai [100 ... 104]:
    row indices: 25 27 32 40 48

Column: 18, number of entries: 5, with row indices in Ai [105 ... 109]:
    row indices: 22 31 33 38 47

Column: 19, number of entries: 5, with row indices in Ai [110 ... 114]:
    row indices: 23 30 34 39 44

Column: 20, number of entries: 4, with row indices in Ai [115 ... 118]:
    row indices: 31 34 41 48

Column: 21, number of entries: 4, with row indices in Ai [119 ... 122]:
    row indices: 30 37 40 47

Column: 22, number of entries: 4, with row indices in Ai [123 ... 126]:
    row indices: 29 32 39 49

Column: 23, number of entries: 4, with row indices in Ai [127 ... 130]:
    row indices: 28 36 38 45

Column: 24, number of entries: 4, with row indices in Ai [131 ... 134]:
    row indices: 27 35 43 44

Column: 25, number of entries: 4, with row indices in Ai [135 ... 138]:
    row indices: 26 33 42 46

Column: 26, number of entries: 3, with row indices in Ai [139 ... 141]:
    row indices: 36 39 47

Column: 27, number of entries: 3, with row indices in Ai [142 ... 144]:
    row indices: 34 38 49

Column: 28, number of entries: 3, with row indices in Ai [145 ... 147]:
    row indices: 33 43 48

Column: 29, number of entries: 3, with row indices in Ai [148 ... 150]:
    row indices: 37 42 44

Column: 30, number of entries: 3, with row indices in Ai [151 ... 153]:
    row indices: 32 41 46

Column: 31, number of entries: 3, with row indices in Ai [154 ... 156]:
    row indices: 35 40 45

Column: 32, number of entries: 2, with row indices in Ai [157 ... 158]:
    row indices: 43 45

Column: 33, number of entries: 2, with row indices in Ai [159 ... 160]:
    row indices: 41 44

Column: 34, number of entries: 2, with row indices in Ai [161 ... 162]:
    row indices: 42 47

Column: 35, number of entries: 2, with row indices in Ai [163 ... 164]:
    row indices: 39 46

Column: 36, number of entries: 2, with row indices in Ai [165 ... 166]:
    row indices: 40 49

Column: 37, number of entries: 2, with row indices in Ai [167 ... 168]:
    row indices: 38 48

Column: 38, number of entries: 1, with row indices in Ai [169 ... 169]:
    row indices: 46

Column: 39, number of entries: 1, with row indices in Ai [170 ... 170]:
    row indices: 48

Column: 40, number of entries: 1, with row indices in Ai [171 ... 171]:
    row indices: 44

Column: 41, number of entries: 1, with row indices in Ai [172 ... 172]:
    row indices: 49

Column: 42, number of entries: 1, with row indices in Ai [173 ... 173]:
    row indices: 45

Column: 43, number of entries: 1, with row indices in Ai [174 ... 174]:
    row indices: 47

Column: 44, number of entries: 0, with row indices in Ai [175 ... 174]:
    row indices:

Column: 45, number of entries: 0, with row indices in Ai [175 ... 174]:
    row indices:

Column: 46, number of entries: 0, with row indices in Ai [175 ... 174]:
    row indices:

Column: 47, number of entries: 0, with row indices in Ai [175 ... 174]:
    row indices:

Column: 48, number of entries: 0, with row indices in Ai [175 ... 174]:
    row indices:

Column: 49, number of entries: 0, with row indices in Ai [175 ... 174]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  50
    nz, number of nonzeros in A:                        175
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       350
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              3480
    # of memory compactions:                            1

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 682
    nonzeros in L (including diagonal):                 732
    # divide operations for LDL' or LU:                 682
    # multiply-subtract operations for LDL':            6661
    # multiply-subtract operations for LU:              12640
    max nz. in any column of L (incl. diagonal):        31

    chol flop count for real A, sqrt counted as 1 flop: 14054
    LDL' flop count for real A:                         14004
    LDL' flop count for complex A:                      59426
    LU flop count for real A (with no pivoting):        25962
    LU flop count for complex A (with no pivoting):     107258

Permutation vector:
  2 47 18  3 44 24  4 46 30  5  1 49 13 36 48  6 45 42 39  0  7  8  9 10 11 12 14 15 16 17 20 21 22 23 25 26 27 28 29 31 32 33 34 35 37 38 40 41 43 19

Inverse permutation vector:
 19 10  0  3  6  9 15 20 21 22 23 24 25 12 26 27 28 29  2 49 30 31 32 33  5 34 35 36 37 38  8 39 40 41 42 43 13 44 45 18 46 47 17 48  4 16  7  1 14 11

Execution of AMD demo: OK
