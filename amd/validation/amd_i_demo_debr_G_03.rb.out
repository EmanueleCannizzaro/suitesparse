
===========================================================
title: [AG-Monien/debr_G_03]
status 0
key [2439G3] nrow 32 ncol 32
mkind 1 skind 1 asize 122 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 32 ncol 32 nnz 61 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  32-by-32, with 61 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 2, with row indices in Ai [0 ... 1]:
    row indices: 1 16

Column: 1, number of entries: 3, with row indices in Ai [2 ... 4]:
    row indices: 2 3 16

Column: 2, number of entries: 3, with row indices in Ai [5 ... 7]:
    row indices: 4 5 17

Column: 3, number of entries: 3, with row indices in Ai [8 ... 10]:
    row indices: 6 7 17

Column: 4, number of entries: 3, with row indices in Ai [11 ... 13]:
    row indices: 8 9 18

Column: 5, number of entries: 3, with row indices in Ai [14 ... 16]:
    row indices: 10 11 18

Column: 6, number of entries: 3, with row indices in Ai [17 ... 19]:
    row indices: 12 13 19

Column: 7, number of entries: 3, with row indices in Ai [20 ... 22]:
    row indices: 14 15 19

Column: 8, number of entries: 3, with row indices in Ai [23 ... 25]:
    row indices: 16 17 20

Column: 9, number of entries: 3, with row indices in Ai [26 ... 28]:
    row indices: 18 19 20

Column: 10, number of entries: 2, with row indices in Ai [29 ... 30]:
    row indices: 20 21

Column: 11, number of entries: 3, with row indices in Ai [31 ... 33]:
    row indices: 21 22 23

Column: 12, number of entries: 3, with row indices in Ai [34 ... 36]:
    row indices: 22 24 25

Column: 13, number of entries: 3, with row indices in Ai [37 ... 39]:
    row indices: 22 26 27

Column: 14, number of entries: 3, with row indices in Ai [40 ... 42]:
    row indices: 23 28 29

Column: 15, number of entries: 3, with row indices in Ai [43 ... 45]:
    row indices: 23 30 31

Column: 16, number of entries: 1, with row indices in Ai [46 ... 46]:
    row indices: 24

Column: 17, number of entries: 1, with row indices in Ai [47 ... 47]:
    row indices: 24

Column: 18, number of entries: 1, with row indices in Ai [48 ... 48]:
    row indices: 25

Column: 19, number of entries: 1, with row indices in Ai [49 ... 49]:
    row indices: 25

Column: 20, number of entries: 1, with row indices in Ai [50 ... 50]:
    row indices: 26

Column: 21, number of entries: 1, with row indices in Ai [51 ... 51]:
    row indices: 26

Column: 22, number of entries: 1, with row indices in Ai [52 ... 52]:
    row indices: 27

Column: 23, number of entries: 1, with row indices in Ai [53 ... 53]:
    row indices: 27

Column: 24, number of entries: 1, with row indices in Ai [54 ... 54]:
    row indices: 28

Column: 25, number of entries: 1, with row indices in Ai [55 ... 55]:
    row indices: 28

Column: 26, number of entries: 1, with row indices in Ai [56 ... 56]:
    row indices: 29

Column: 27, number of entries: 1, with row indices in Ai [57 ... 57]:
    row indices: 29

Column: 28, number of entries: 1, with row indices in Ai [58 ... 58]:
    row indices: 30

Column: 29, number of entries: 1, with row indices in Ai [59 ... 59]:
    row indices: 30

Column: 30, number of entries: 1, with row indices in Ai [60 ... 60]:
    row indices: 31

Column: 31, number of entries: 0, with row indices in Ai [61 ... 60]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  32
    nz, number of nonzeros in A:                        61
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       122
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              1736
    # of memory compactions:                            1

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 136
    nonzeros in L (including diagonal):                 168
    # divide operations for LDL' or LU:                 136
    # multiply-subtract operations for LDL':            407
    # multiply-subtract operations for LU:              678
    max nz. in any column of L (incl. diagonal):        9

    chol flop count for real A, sqrt counted as 1 flop: 982
    LDL' flop count for real A:                         950
    LDL' flop count for complex A:                      4480
    LU flop count for real A (with no pivoting):        1492
    LU flop count for complex A (with no pivoting):     6648

Permutation vector:
  6 27 22 31 30 15 14  7  0 16  1 17 24 25  9  4 21 10  5 20  2 18  8 28  3 11 12 13 19 23 26 29

Inverse permutation vector:
  8 10 20 24 15 18  0  7 22 14 17 25 26 27  6  5  9 11 21 28 19 16  2 29 12 13 30  1 23 31  4  3

Execution of AMD demo: OK
