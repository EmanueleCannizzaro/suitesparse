
===========================================================
title: [AG-Monien/cage_G_16]
status 0
key [2436G16] nrow 58 ncol 58
mkind 1 skind 1 asize 174 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 58 ncol 58 nnz 87 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  58-by-58, with 87 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 3, with row indices in Ai [0 ... 2]:
    row indices: 24 48 50

Column: 1, number of entries: 3, with row indices in Ai [3 ... 5]:
    row indices: 8 16 24

Column: 2, number of entries: 3, with row indices in Ai [6 ... 8]:
    row indices: 19 25 46

Column: 3, number of entries: 3, with row indices in Ai [9 ... 11]:
    row indices: 11 25 49

Column: 4, number of entries: 3, with row indices in Ai [12 ... 14]:
    row indices: 9 26 54

Column: 5, number of entries: 3, with row indices in Ai [15 ... 17]:
    row indices: 12 20 26

Column: 6, number of entries: 3, with row indices in Ai [18 ... 20]:
    row indices: 18 27 47

Column: 7, number of entries: 3, with row indices in Ai [21 ... 23]:
    row indices: 15 27 51

Column: 8, number of entries: 2, with row indices in Ai [24 ... 25]:
    row indices: 28 52

Column: 9, number of entries: 2, with row indices in Ai [26 ... 27]:
    row indices: 22 28

Column: 10, number of entries: 3, with row indices in Ai [28 ... 30]:
    row indices: 20 29 50

Column: 11, number of entries: 2, with row indices in Ai [31 ... 32]:
    row indices: 29 47

Column: 12, number of entries: 2, with row indices in Ai [33 ... 34]:
    row indices: 16 30

Column: 13, number of entries: 3, with row indices in Ai [35 ... 37]:
    row indices: 23 30 55

Column: 14, number of entries: 3, with row indices in Ai [38 ... 40]:
    row indices: 21 31 53

Column: 15, number of entries: 2, with row indices in Ai [41 ... 42]:
    row indices: 31 46

Column: 16, number of entries: 1, with row indices in Ai [43 ... 43]:
    row indices: 32

Column: 17, number of entries: 3, with row indices in Ai [44 ... 46]:
    row indices: 32 49 51

Column: 18, number of entries: 2, with row indices in Ai [47 ... 48]:
    row indices: 33 48

Column: 19, number of entries: 2, with row indices in Ai [49 ... 50]:
    row indices: 33 56

Column: 20, number of entries: 1, with row indices in Ai [51 ... 51]:
    row indices: 34

Column: 21, number of entries: 2, with row indices in Ai [52 ... 53]:
    row indices: 34 52

Column: 22, number of entries: 2, with row indices in Ai [54 ... 55]:
    row indices: 35 46

Column: 23, number of entries: 2, with row indices in Ai [56 ... 57]:
    row indices: 35 47

Column: 24, number of entries: 1, with row indices in Ai [58 ... 58]:
    row indices: 36

Column: 25, number of entries: 1, with row indices in Ai [59 ... 59]:
    row indices: 36

Column: 26, number of entries: 1, with row indices in Ai [60 ... 60]:
    row indices: 37

Column: 27, number of entries: 1, with row indices in Ai [61 ... 61]:
    row indices: 37

Column: 28, number of entries: 1, with row indices in Ai [62 ... 62]:
    row indices: 38

Column: 29, number of entries: 1, with row indices in Ai [63 ... 63]:
    row indices: 38

Column: 30, number of entries: 1, with row indices in Ai [64 ... 64]:
    row indices: 39

Column: 31, number of entries: 1, with row indices in Ai [65 ... 65]:
    row indices: 39

Column: 32, number of entries: 1, with row indices in Ai [66 ... 66]:
    row indices: 40

Column: 33, number of entries: 1, with row indices in Ai [67 ... 67]:
    row indices: 40

Column: 34, number of entries: 1, with row indices in Ai [68 ... 68]:
    row indices: 41

Column: 35, number of entries: 1, with row indices in Ai [69 ... 69]:
    row indices: 41

Column: 36, number of entries: 1, with row indices in Ai [70 ... 70]:
    row indices: 42

Column: 37, number of entries: 1, with row indices in Ai [71 ... 71]:
    row indices: 42

Column: 38, number of entries: 1, with row indices in Ai [72 ... 72]:
    row indices: 43

Column: 39, number of entries: 1, with row indices in Ai [73 ... 73]:
    row indices: 43

Column: 40, number of entries: 1, with row indices in Ai [74 ... 74]:
    row indices: 44

Column: 41, number of entries: 1, with row indices in Ai [75 ... 75]:
    row indices: 44

Column: 42, number of entries: 1, with row indices in Ai [76 ... 76]:
    row indices: 45

Column: 43, number of entries: 1, with row indices in Ai [77 ... 77]:
    row indices: 45

Column: 44, number of entries: 1, with row indices in Ai [78 ... 78]:
    row indices: 45

Column: 45, number of entries: 0, with row indices in Ai [79 ... 78]:
    row indices:

Column: 46, number of entries: 0, with row indices in Ai [79 ... 78]:
    row indices:

Column: 47, number of entries: 0, with row indices in Ai [79 ... 78]:
    row indices:

Column: 48, number of entries: 1, with row indices in Ai [79 ... 79]:
    row indices: 53

Column: 49, number of entries: 1, with row indices in Ai [80 ... 80]:
    row indices: 54

Column: 50, number of entries: 1, with row indices in Ai [81 ... 81]:
    row indices: 57

Column: 51, number of entries: 1, with row indices in Ai [82 ... 82]:
    row indices: 57

Column: 52, number of entries: 1, with row indices in Ai [83 ... 83]:
    row indices: 56

Column: 53, number of entries: 1, with row indices in Ai [84 ... 84]:
    row indices: 54

Column: 54, number of entries: 0, with row indices in Ai [85 ... 84]:
    row indices:

Column: 55, number of entries: 2, with row indices in Ai [85 ... 86]:
    row indices: 56 57

Column: 56, number of entries: 0, with row indices in Ai [87 ... 86]:
    row indices:

Column: 57, number of entries: 0, with row indices in Ai [87 ... 86]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  58
    nz, number of nonzeros in A:                        87
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       174
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              5840
    # of memory compactions:                            1

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 318
    nonzeros in L (including diagonal):                 376
    # divide operations for LDL' or LU:                 318
    # multiply-subtract operations for LDL':            1429
    # multiply-subtract operations for LU:              2540
    max nz. in any column of L (incl. diagonal):        17

    chol flop count for real A, sqrt counted as 1 flop: 3234
    LDL' flop count for real A:                         3176
    LDL' flop count for complex A:                      14294
    LU flop count for real A (with no pivoting):        5398
    LU flop count for complex A (with no pivoting):     23182

Permutation vector:
 48 36 24  0 20 10 16 12 37 26  5 40 33 45 41 35 44 17 54  3 47  6 11 49  8  9 38 28 13 56 57 55 21 14 39  7 46  2 15 31 52  1  4 18 19 22 23 25 27 30 32 34 42 43 50 51 53 29

Inverse permutation vector:
  3 41 37 19 42 10 21 35 24 25  5 22  7 28 33 38  6 17 43 44  4 32 45 46  2 47  9 48 27 57 49 39 50 12 51 15  1  8 26 34 11 14 52 53 16 13 36 20  0 23 54 55 40 56 18 31 29 30

Execution of AMD demo: OK
