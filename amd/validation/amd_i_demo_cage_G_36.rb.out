
===========================================================
title: [AG-Monien/cage_G_36]
status 0
key [2436G36] nrow 42 ncol 42
mkind 1 skind 1 asize 210 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 42 ncol 42 nnz 105 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  42-by-42, with 105 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 5, with row indices in Ai [0 ... 4]:
    row indices: 1 2 3 4 5

Column: 1, number of entries: 4, with row indices in Ai [5 ... 8]:
    row indices: 6 7 8 9

Column: 2, number of entries: 4, with row indices in Ai [9 ... 12]:
    row indices: 10 11 12 13

Column: 3, number of entries: 4, with row indices in Ai [13 ... 16]:
    row indices: 14 15 16 17

Column: 4, number of entries: 4, with row indices in Ai [17 ... 20]:
    row indices: 18 19 20 21

Column: 5, number of entries: 4, with row indices in Ai [21 ... 24]:
    row indices: 22 23 24 25

Column: 6, number of entries: 4, with row indices in Ai [25 ... 28]:
    row indices: 26 27 28 29

Column: 7, number of entries: 4, with row indices in Ai [29 ... 32]:
    row indices: 30 31 32 33

Column: 8, number of entries: 4, with row indices in Ai [33 ... 36]:
    row indices: 34 35 36 37

Column: 9, number of entries: 4, with row indices in Ai [37 ... 40]:
    row indices: 38 39 40 41

Column: 10, number of entries: 4, with row indices in Ai [41 ... 44]:
    row indices: 26 30 34 38

Column: 11, number of entries: 4, with row indices in Ai [45 ... 48]:
    row indices: 27 31 35 39

Column: 12, number of entries: 4, with row indices in Ai [49 ... 52]:
    row indices: 28 32 36 40

Column: 13, number of entries: 4, with row indices in Ai [53 ... 56]:
    row indices: 29 33 37 41

Column: 14, number of entries: 4, with row indices in Ai [57 ... 60]:
    row indices: 26 31 36 41

Column: 15, number of entries: 4, with row indices in Ai [61 ... 64]:
    row indices: 27 30 37 40

Column: 16, number of entries: 4, with row indices in Ai [65 ... 68]:
    row indices: 28 33 34 39

Column: 17, number of entries: 4, with row indices in Ai [69 ... 72]:
    row indices: 29 32 35 38

Column: 18, number of entries: 4, with row indices in Ai [73 ... 76]:
    row indices: 26 32 37 39

Column: 19, number of entries: 4, with row indices in Ai [77 ... 80]:
    row indices: 27 33 36 38

Column: 20, number of entries: 4, with row indices in Ai [81 ... 84]:
    row indices: 28 30 35 41

Column: 21, number of entries: 4, with row indices in Ai [85 ... 88]:
    row indices: 29 31 34 40

Column: 22, number of entries: 4, with row indices in Ai [89 ... 92]:
    row indices: 26 33 35 40

Column: 23, number of entries: 4, with row indices in Ai [93 ... 96]:
    row indices: 27 32 34 41

Column: 24, number of entries: 4, with row indices in Ai [97 ... 100]:
    row indices: 28 31 37 38

Column: 25, number of entries: 4, with row indices in Ai [101 ... 104]:
    row indices: 29 30 36 39

Column: 26, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 27, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 28, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 29, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 30, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 31, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 32, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 33, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 34, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 35, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 36, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 37, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 38, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 39, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 40, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

Column: 41, number of entries: 0, with row indices in Ai [105 ... 104]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  42
    nz, number of nonzeros in A:                        105
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       210
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              2520
    # of memory compactions:                            0

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 315
    nonzeros in L (including diagonal):                 357
    # divide operations for LDL' or LU:                 315
    # multiply-subtract operations for LDL':            1855
    # multiply-subtract operations for LU:              3395
    max nz. in any column of L (incl. diagonal):        21

    chol flop count for real A, sqrt counted as 1 flop: 4067
    LDL' flop count for real A:                         4025
    LDL' flop count for complex A:                      17675
    LU flop count for real A (with no pivoting):        7105
    LU flop count for complex A (with no pivoting):     29995

Permutation vector:
  1  2  3  4  5 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  0  6  7  8 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  9

Inverse permutation vector:
 21  0  1  2  3  4 22 23 24 41 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

Execution of AMD demo: OK
