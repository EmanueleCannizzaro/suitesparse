
===========================================================
title: [AG-Monien/debr_G_04]
status 0
key [2439G4] nrow 64 ncol 64
mkind 1 skind 1 asize 250 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 64 ncol 64 nnz 125 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  64-by-64, with 125 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 2, with row indices in Ai [0 ... 1]:
    row indices: 1 32

Column: 1, number of entries: 3, with row indices in Ai [2 ... 4]:
    row indices: 2 3 32

Column: 2, number of entries: 3, with row indices in Ai [5 ... 7]:
    row indices: 4 5 33

Column: 3, number of entries: 3, with row indices in Ai [8 ... 10]:
    row indices: 6 7 33

Column: 4, number of entries: 3, with row indices in Ai [11 ... 13]:
    row indices: 8 9 34

Column: 5, number of entries: 3, with row indices in Ai [14 ... 16]:
    row indices: 10 11 34

Column: 6, number of entries: 3, with row indices in Ai [17 ... 19]:
    row indices: 12 13 35

Column: 7, number of entries: 3, with row indices in Ai [20 ... 22]:
    row indices: 14 15 35

Column: 8, number of entries: 3, with row indices in Ai [23 ... 25]:
    row indices: 16 17 36

Column: 9, number of entries: 3, with row indices in Ai [26 ... 28]:
    row indices: 18 19 36

Column: 10, number of entries: 3, with row indices in Ai [29 ... 31]:
    row indices: 20 21 37

Column: 11, number of entries: 3, with row indices in Ai [32 ... 34]:
    row indices: 22 23 37

Column: 12, number of entries: 3, with row indices in Ai [35 ... 37]:
    row indices: 24 25 38

Column: 13, number of entries: 3, with row indices in Ai [38 ... 40]:
    row indices: 26 27 38

Column: 14, number of entries: 3, with row indices in Ai [41 ... 43]:
    row indices: 28 29 39

Column: 15, number of entries: 3, with row indices in Ai [44 ... 46]:
    row indices: 30 31 39

Column: 16, number of entries: 3, with row indices in Ai [47 ... 49]:
    row indices: 32 33 40

Column: 17, number of entries: 3, with row indices in Ai [50 ... 52]:
    row indices: 34 35 40

Column: 18, number of entries: 3, with row indices in Ai [53 ... 55]:
    row indices: 36 37 41

Column: 19, number of entries: 3, with row indices in Ai [56 ... 58]:
    row indices: 38 39 41

Column: 20, number of entries: 3, with row indices in Ai [59 ... 61]:
    row indices: 40 41 42

Column: 21, number of entries: 2, with row indices in Ai [62 ... 63]:
    row indices: 42 43

Column: 22, number of entries: 3, with row indices in Ai [64 ... 66]:
    row indices: 43 44 45

Column: 23, number of entries: 3, with row indices in Ai [67 ... 69]:
    row indices: 43 46 47

Column: 24, number of entries: 3, with row indices in Ai [70 ... 72]:
    row indices: 44 48 49

Column: 25, number of entries: 3, with row indices in Ai [73 ... 75]:
    row indices: 44 50 51

Column: 26, number of entries: 3, with row indices in Ai [76 ... 78]:
    row indices: 45 52 53

Column: 27, number of entries: 3, with row indices in Ai [79 ... 81]:
    row indices: 45 54 55

Column: 28, number of entries: 3, with row indices in Ai [82 ... 84]:
    row indices: 46 56 57

Column: 29, number of entries: 3, with row indices in Ai [85 ... 87]:
    row indices: 46 58 59

Column: 30, number of entries: 3, with row indices in Ai [88 ... 90]:
    row indices: 47 60 61

Column: 31, number of entries: 3, with row indices in Ai [91 ... 93]:
    row indices: 47 62 63

Column: 32, number of entries: 1, with row indices in Ai [94 ... 94]:
    row indices: 48

Column: 33, number of entries: 1, with row indices in Ai [95 ... 95]:
    row indices: 48

Column: 34, number of entries: 1, with row indices in Ai [96 ... 96]:
    row indices: 49

Column: 35, number of entries: 1, with row indices in Ai [97 ... 97]:
    row indices: 49

Column: 36, number of entries: 1, with row indices in Ai [98 ... 98]:
    row indices: 50

Column: 37, number of entries: 1, with row indices in Ai [99 ... 99]:
    row indices: 50

Column: 38, number of entries: 1, with row indices in Ai [100 ... 100]:
    row indices: 51

Column: 39, number of entries: 1, with row indices in Ai [101 ... 101]:
    row indices: 51

Column: 40, number of entries: 1, with row indices in Ai [102 ... 102]:
    row indices: 52

Column: 41, number of entries: 1, with row indices in Ai [103 ... 103]:
    row indices: 52

Column: 42, number of entries: 1, with row indices in Ai [104 ... 104]:
    row indices: 53

Column: 43, number of entries: 1, with row indices in Ai [105 ... 105]:
    row indices: 53

Column: 44, number of entries: 1, with row indices in Ai [106 ... 106]:
    row indices: 54

Column: 45, number of entries: 1, with row indices in Ai [107 ... 107]:
    row indices: 54

Column: 46, number of entries: 1, with row indices in Ai [108 ... 108]:
    row indices: 55

Column: 47, number of entries: 1, with row indices in Ai [109 ... 109]:
    row indices: 55

Column: 48, number of entries: 1, with row indices in Ai [110 ... 110]:
    row indices: 56

Column: 49, number of entries: 1, with row indices in Ai [111 ... 111]:
    row indices: 56

Column: 50, number of entries: 1, with row indices in Ai [112 ... 112]:
    row indices: 57

Column: 51, number of entries: 1, with row indices in Ai [113 ... 113]:
    row indices: 57

Column: 52, number of entries: 1, with row indices in Ai [114 ... 114]:
    row indices: 58

Column: 53, number of entries: 1, with row indices in Ai [115 ... 115]:
    row indices: 58

Column: 54, number of entries: 1, with row indices in Ai [116 ... 116]:
    row indices: 59

Column: 55, number of entries: 1, with row indices in Ai [117 ... 117]:
    row indices: 59

Column: 56, number of entries: 1, with row indices in Ai [118 ... 118]:
    row indices: 60

Column: 57, number of entries: 1, with row indices in Ai [119 ... 119]:
    row indices: 60

Column: 58, number of entries: 1, with row indices in Ai [120 ... 120]:
    row indices: 61

Column: 59, number of entries: 1, with row indices in Ai [121 ... 121]:
    row indices: 61

Column: 60, number of entries: 1, with row indices in Ai [122 ... 122]:
    row indices: 62

Column: 61, number of entries: 1, with row indices in Ai [123 ... 123]:
    row indices: 62

Column: 62, number of entries: 1, with row indices in Ai [124 ... 124]:
    row indices: 63

Column: 63, number of entries: 0, with row indices in Ai [125 ... 124]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  64
    nz, number of nonzeros in A:                        125
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       250
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              7008
    # of memory compactions:                            1

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 390
    nonzeros in L (including diagonal):                 454
    # divide operations for LDL' or LU:                 390
    # multiply-subtract operations for LDL':            1726
    # multiply-subtract operations for LU:              3062
    max nz. in any column of L (incl. diagonal):        15

    chol flop count for real A, sqrt counted as 1 flop: 3906
    LDL' flop count for real A:                         3842
    LDL' flop count for complex A:                      17318
    LU flop count for real A (with no pivoting):        6514
    LU flop count for complex A (with no pivoting):     28006

Permutation vector:
 44 38 12 25 24 45 27 26 58 59 46 63 62 31 30 47 39 14 15 29 61 55 56 57  0 32  1 33  3  2 34 35 36  9  8 40 41 42 21 43 37 11 10 20 18  5 16 17  4  6 13 19 22 23 28 48 49 50 51 52 53 54 60  7

Inverse permutation vector:
 24 26 29 28 48 45 49 63 34 33 42 41  2 50 17 18 46 47 44 51 43 38 52 53  4  3  7  6 54 19 14 13 25 27 30 31 32 40  1 16 35 36 37 39  0  5 10 15 55 56 57 58 59 60 61 21 22 23  8  9 62 20 12 11

Execution of AMD demo: OK
