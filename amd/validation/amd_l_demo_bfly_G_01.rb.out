
===========================================================
title: [AG-Monien/bfly_G_01]
status 0
key [2435G1] nrow 24 ncol 24
mkind 1 skind 1 asize 96 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 24 ncol 24 nnz 48 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  24-by-24, with 48 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 4, with row indices in Ai [0 ... 3]:
    row indices: 1 2 4 14

Column: 1, number of entries: 3, with row indices in Ai [4 ... 6]:
    row indices: 2 3 8

Column: 2, number of entries: 2, with row indices in Ai [7 ... 8]:
    row indices: 7 12

Column: 3, number of entries: 3, with row indices in Ai [9 ... 11]:
    row indices: 4 5 17

Column: 4, number of entries: 2, with row indices in Ai [12 ... 13]:
    row indices: 5 11

Column: 5, number of entries: 2, with row indices in Ai [14 ... 15]:
    row indices: 10 15

Column: 6, number of entries: 4, with row indices in Ai [16 ... 19]:
    row indices: 7 8 10 20

Column: 7, number of entries: 2, with row indices in Ai [20 ... 21]:
    row indices: 8 9

Column: 8, number of entries: 1, with row indices in Ai [22 ... 22]:
    row indices: 18

Column: 9, number of entries: 3, with row indices in Ai [23 ... 25]:
    row indices: 10 11 23

Column: 10, number of entries: 1, with row indices in Ai [26 ... 26]:
    row indices: 11

Column: 11, number of entries: 1, with row indices in Ai [27 ... 27]:
    row indices: 21

Column: 12, number of entries: 3, with row indices in Ai [28 ... 30]:
    row indices: 13 14 16

Column: 13, number of entries: 3, with row indices in Ai [31 ... 33]:
    row indices: 14 15 20

Column: 14, number of entries: 1, with row indices in Ai [34 ... 34]:
    row indices: 19

Column: 15, number of entries: 2, with row indices in Ai [35 ... 36]:
    row indices: 16 17

Column: 16, number of entries: 2, with row indices in Ai [37 ... 38]:
    row indices: 17 23

Column: 17, number of entries: 1, with row indices in Ai [39 ... 39]:
    row indices: 22

Column: 18, number of entries: 3, with row indices in Ai [40 ... 42]:
    row indices: 19 20 22

Column: 19, number of entries: 2, with row indices in Ai [43 ... 44]:
    row indices: 20 21

Column: 20, number of entries: 0, with row indices in Ai [45 ... 44]:
    row indices:

Column: 21, number of entries: 2, with row indices in Ai [45 ... 46]:
    row indices: 22 23

Column: 22, number of entries: 1, with row indices in Ai [47 ... 47]:
    row indices: 23

Column: 23, number of entries: 0, with row indices in Ai [48 ... 47]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  24
    nz, number of nonzeros in A:                        48
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       96
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              2648
    # of memory compactions:                            1

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 108
    nonzeros in L (including diagonal):                 132
    # divide operations for LDL' or LU:                 108
    # multiply-subtract operations for LDL':            332
    # multiply-subtract operations for LU:              556
    max nz. in any column of L (incl. diagonal):        8

    chol flop count for real A, sqrt counted as 1 flop: 796
    LDL' flop count for real A:                         772
    LDL' flop count for complex A:                      3628
    LU flop count for real A (with no pivoting):        1220
    LU flop count for complex A (with no pivoting):     5420

Permutation vector:
  2 14 12  0  5 17 15  3  8 20 18  6 11 23 21  9  1  4 10 13 16 19 22  7

Inverse permutation vector:
  3 16  0  7 17  4 11 23  8 15 18 12  2 19  1  6 20  5 10 21  9 14 22 13

Execution of AMD demo: OK
