
===========================================================
title: [Newman/dolphins; 2003; D. Lusseau; ed: M. Newman]
status 0
key [2396] nrow 62 ncol 62
mkind 1 skind 1 asize 318 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 62 ncol 62 nnz 159 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  62-by-62, with 159 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 6, with row indices in Ai [0 ... 5]:
    row indices: 10 14 15 40 42 47

Column: 1, number of entries: 8, with row indices in Ai [6 ... 13]:
    row indices: 17 19 26 27 28 36 41 54

Column: 2, number of entries: 4, with row indices in Ai [14 ... 17]:
    row indices: 10 42 44 61

Column: 3, number of entries: 3, with row indices in Ai [18 ... 20]:
    row indices: 8 14 59

Column: 4, number of entries: 1, with row indices in Ai [21 ... 21]:
    row indices: 51

Column: 5, number of entries: 4, with row indices in Ai [22 ... 25]:
    row indices: 9 13 56 57

Column: 6, number of entries: 6, with row indices in Ai [26 ... 31]:
    row indices: 9 13 17 54 56 57

Column: 7, number of entries: 5, with row indices in Ai [32 ... 36]:
    row indices: 19 27 30 40 54

Column: 8, number of entries: 5, with row indices in Ai [37 ... 41]:
    row indices: 20 28 37 45 59

Column: 9, number of entries: 5, with row indices in Ai [42 ... 46]:
    row indices: 13 17 32 41 57

Column: 10, number of entries: 3, with row indices in Ai [47 ... 49]:
    row indices: 29 42 47

Column: 11, number of entries: 1, with row indices in Ai [50 ... 50]:
    row indices: 51

Column: 12, number of entries: 1, with row indices in Ai [51 ... 51]:
    row indices: 33

Column: 13, number of entries: 5, with row indices in Ai [52 ... 56]:
    row indices: 17 32 41 54 57

Column: 14, number of entries: 10, with row indices in Ai [57 ... 66]:
    row indices: 16 24 33 34 37 38 40 43 50 52

Column: 15, number of entries: 6, with row indices in Ai [67 ... 72]:
    row indices: 18 24 40 45 55 59

Column: 16, number of entries: 5, with row indices in Ai [73 ... 77]:
    row indices: 20 33 37 38 50

Column: 17, number of entries: 5, with row indices in Ai [78 ... 82]:
    row indices: 22 25 27 31 57

Column: 18, number of entries: 6, with row indices in Ai [83 ... 88]:
    row indices: 20 21 24 29 45 51

Column: 19, number of entries: 2, with row indices in Ai [89 ... 90]:
    row indices: 30 54

Column: 20, number of entries: 6, with row indices in Ai [91 ... 96]:
    row indices: 28 36 38 44 47 50

Column: 21, number of entries: 5, with row indices in Ai [97 ... 101]:
    row indices: 29 33 37 45 51

Column: 22, number of entries: 0, with row indices in Ai [102 ... 101]:
    row indices:

Column: 23, number of entries: 3, with row indices in Ai [102 ... 104]:
    row indices: 36 45 51

Column: 24, number of entries: 3, with row indices in Ai [105 ... 107]:
    row indices: 29 45 51

Column: 25, number of entries: 2, with row indices in Ai [108 ... 109]:
    row indices: 26 27

Column: 26, number of entries: 1, with row indices in Ai [110 ... 110]:
    row indices: 27

Column: 27, number of entries: 0, with row indices in Ai [111 ... 110]:
    row indices:

Column: 28, number of entries: 2, with row indices in Ai [111 ... 112]:
    row indices: 30 47

Column: 29, number of entries: 5, with row indices in Ai [113 ... 117]:
    row indices: 35 43 45 51 52

Column: 30, number of entries: 2, with row indices in Ai [118 ... 119]:
    row indices: 42 47

Column: 31, number of entries: 0, with row indices in Ai [120 ... 119]:
    row indices:

Column: 32, number of entries: 1, with row indices in Ai [120 ... 120]:
    row indices: 60

Column: 33, number of entries: 6, with row indices in Ai [121 ... 126]:
    row indices: 34 37 38 40 43 50

Column: 34, number of entries: 3, with row indices in Ai [127 ... 129]:
    row indices: 37 44 49

Column: 35, number of entries: 0, with row indices in Ai [130 ... 129]:
    row indices:

Column: 36, number of entries: 4, with row indices in Ai [130 ... 133]:
    row indices: 37 39 40 59

Column: 37, number of entries: 4, with row indices in Ai [134 ... 137]:
    row indices: 40 43 45 61

Column: 38, number of entries: 4, with row indices in Ai [138 ... 141]:
    row indices: 43 44 52 58

Column: 39, number of entries: 1, with row indices in Ai [142 ... 142]:
    row indices: 57

Column: 40, number of entries: 1, with row indices in Ai [143 ... 143]:
    row indices: 52

Column: 41, number of entries: 2, with row indices in Ai [144 ... 145]:
    row indices: 54 57

Column: 42, number of entries: 2, with row indices in Ai [146 ... 147]:
    row indices: 47 50

Column: 43, number of entries: 2, with row indices in Ai [148 ... 149]:
    row indices: 46 53

Column: 44, number of entries: 0, with row indices in Ai [150 ... 149]:
    row indices:

Column: 45, number of entries: 3, with row indices in Ai [150 ... 152]:
    row indices: 50 51 59

Column: 46, number of entries: 1, with row indices in Ai [153 ... 153]:
    row indices: 49

Column: 47, number of entries: 0, with row indices in Ai [154 ... 153]:
    row indices:

Column: 48, number of entries: 1, with row indices in Ai [154 ... 154]:
    row indices: 57

Column: 49, number of entries: 0, with row indices in Ai [155 ... 154]:
    row indices:

Column: 50, number of entries: 1, with row indices in Ai [155 ... 155]:
    row indices: 51

Column: 51, number of entries: 1, with row indices in Ai [156 ... 156]:
    row indices: 55

Column: 52, number of entries: 0, with row indices in Ai [157 ... 156]:
    row indices:

Column: 53, number of entries: 1, with row indices in Ai [157 ... 157]:
    row indices: 61

Column: 54, number of entries: 1, with row indices in Ai [158 ... 158]:
    row indices: 57

Column: 55, number of entries: 0, with row indices in Ai [159 ... 158]:
    row indices:

Column: 56, number of entries: 0, with row indices in Ai [159 ... 158]:
    row indices:

Column: 57, number of entries: 0, with row indices in Ai [159 ... 158]:
    row indices:

Column: 58, number of entries: 0, with row indices in Ai [159 ... 158]:
    row indices:

Column: 59, number of entries: 0, with row indices in Ai [159 ... 158]:
    row indices:

Column: 60, number of entries: 0, with row indices in Ai [159 ... 158]:
    row indices:

Column: 61, number of entries: 0, with row indices in Ai [159 ... 158]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  62
    nz, number of nonzeros in A:                        159
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       318
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              3756
    # of memory compactions:                            0

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 265
    nonzeros in L (including diagonal):                 327
    # divide operations for LDL' or LU:                 265
    # multiply-subtract operations for LDL':            911
    # multiply-subtract operations for LU:              1557
    max nz. in any column of L (incl. diagonal):        11

    chol flop count for real A, sqrt counted as 1 flop: 2149
    LDL' flop count for real A:                         2087
    LDL' flop count for complex A:                      9673
    LU flop count for real A (with no pivoting):        3379
    LU flop count for complex A (with no pivoting):     14841

Permutation vector:
 10  0 48 39 60 32 56  5  9  6 13 41 31 22 26 25 27 19  7 17 54 57  1 30 28 16 35 58 52 49 46 53 61 44 34 43 38  3 59 23 12 21 11  4 55 24 18 51 45 33 37  8 14 15 20 29 36 40 42 47 50  2

Inverse permutation vector:
  1 22 61 37 43  7  9 18 51  8  0 42 40 10 52 53 25 19 46 17 54 41 13 39 45 15 14 16 24 55 23 12  5 49 34 26 56 50 36  3 57 11 58 35 33 48 30 59  2 29 60 47 28 31 20 44  6 21 27 38  4 32

Execution of AMD demo: OK
