
===========================================================
title: [AG-Monien/ccc_G_01]
status 0
key [2438G1] nrow 24 ncol 24
mkind 1 skind 1 asize 72 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 24 ncol 24 nnz 36 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  24-by-24, with 36 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 3, with row indices in Ai [0 ... 2]:
    row indices: 1 8 16

Column: 1, number of entries: 2, with row indices in Ai [3 ... 4]:
    row indices: 9 17

Column: 2, number of entries: 3, with row indices in Ai [5 ... 7]:
    row indices: 3 10 18

Column: 3, number of entries: 2, with row indices in Ai [8 ... 9]:
    row indices: 11 19

Column: 4, number of entries: 3, with row indices in Ai [10 ... 12]:
    row indices: 5 12 20

Column: 5, number of entries: 2, with row indices in Ai [13 ... 14]:
    row indices: 13 21

Column: 6, number of entries: 3, with row indices in Ai [15 ... 17]:
    row indices: 7 14 22

Column: 7, number of entries: 2, with row indices in Ai [18 ... 19]:
    row indices: 15 23

Column: 8, number of entries: 2, with row indices in Ai [20 ... 21]:
    row indices: 10 16

Column: 9, number of entries: 2, with row indices in Ai [22 ... 23]:
    row indices: 11 17

Column: 10, number of entries: 1, with row indices in Ai [24 ... 24]:
    row indices: 18

Column: 11, number of entries: 1, with row indices in Ai [25 ... 25]:
    row indices: 19

Column: 12, number of entries: 2, with row indices in Ai [26 ... 27]:
    row indices: 14 20

Column: 13, number of entries: 2, with row indices in Ai [28 ... 29]:
    row indices: 15 21

Column: 14, number of entries: 1, with row indices in Ai [30 ... 30]:
    row indices: 22

Column: 15, number of entries: 1, with row indices in Ai [31 ... 31]:
    row indices: 23

Column: 16, number of entries: 1, with row indices in Ai [32 ... 32]:
    row indices: 20

Column: 17, number of entries: 1, with row indices in Ai [33 ... 33]:
    row indices: 21

Column: 18, number of entries: 1, with row indices in Ai [34 ... 34]:
    row indices: 22

Column: 19, number of entries: 1, with row indices in Ai [35 ... 35]:
    row indices: 23

Column: 20, number of entries: 0, with row indices in Ai [36 ... 35]:
    row indices:

Column: 21, number of entries: 0, with row indices in Ai [36 ... 35]:
    row indices:

Column: 22, number of entries: 0, with row indices in Ai [36 ... 35]:
    row indices:

Column: 23, number of entries: 0, with row indices in Ai [36 ... 35]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  24
    nz, number of nonzeros in A:                        36
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       72
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              2416
    # of memory compactions:                            0

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 76
    nonzeros in L (including diagonal):                 100
    # divide operations for LDL' or LU:                 76
    # multiply-subtract operations for LDL':            172
    # multiply-subtract operations for LU:              268
    max nz. in any column of L (incl. diagonal):        6

    chol flop count for real A, sqrt counted as 1 flop: 444
    LDL' flop count for real A:                         420
    LDL' flop count for complex A:                      2060
    LU flop count for real A (with no pivoting):        612
    LU flop count for complex A (with no pivoting):     2828

Permutation vector:
 20  1 21  5 17 10 22 14 18 11  3 23 15  7 19  2  6  9 13  0  8 12 16  4

Inverse permutation vector:
 19  1 15 10 23  3 16 13 20 17  5  9 21 18  7 12 22  4  8 14  0  2  6 11

Execution of AMD demo: OK
