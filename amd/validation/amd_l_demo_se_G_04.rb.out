
===========================================================
title: [AG-Monien/se_G_04]
status 0
key [2440G4] nrow 64 ncol 64
mkind 1 skind 1 asize 186 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 64 ncol 64 nnz 93 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  64-by-64, with 93 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 1, with row indices in Ai [0 ... 0]:
    row indices: 1

Column: 1, number of entries: 2, with row indices in Ai [1 ... 2]:
    row indices: 2 32

Column: 2, number of entries: 2, with row indices in Ai [3 ... 4]:
    row indices: 3 4

Column: 3, number of entries: 2, with row indices in Ai [5 ... 6]:
    row indices: 6 33

Column: 4, number of entries: 2, with row indices in Ai [7 ... 8]:
    row indices: 5 8

Column: 5, number of entries: 2, with row indices in Ai [9 ... 10]:
    row indices: 10 34

Column: 6, number of entries: 2, with row indices in Ai [11 ... 12]:
    row indices: 7 12

Column: 7, number of entries: 2, with row indices in Ai [13 ... 14]:
    row indices: 14 35

Column: 8, number of entries: 2, with row indices in Ai [15 ... 16]:
    row indices: 9 16

Column: 9, number of entries: 2, with row indices in Ai [17 ... 18]:
    row indices: 18 36

Column: 10, number of entries: 2, with row indices in Ai [19 ... 20]:
    row indices: 11 20

Column: 11, number of entries: 2, with row indices in Ai [21 ... 22]:
    row indices: 22 37

Column: 12, number of entries: 2, with row indices in Ai [23 ... 24]:
    row indices: 13 24

Column: 13, number of entries: 2, with row indices in Ai [25 ... 26]:
    row indices: 26 38

Column: 14, number of entries: 2, with row indices in Ai [27 ... 28]:
    row indices: 15 28

Column: 15, number of entries: 2, with row indices in Ai [29 ... 30]:
    row indices: 30 39

Column: 16, number of entries: 2, with row indices in Ai [31 ... 32]:
    row indices: 17 32

Column: 17, number of entries: 2, with row indices in Ai [33 ... 34]:
    row indices: 34 40

Column: 18, number of entries: 2, with row indices in Ai [35 ... 36]:
    row indices: 19 36

Column: 19, number of entries: 2, with row indices in Ai [37 ... 38]:
    row indices: 38 41

Column: 20, number of entries: 2, with row indices in Ai [39 ... 40]:
    row indices: 21 40

Column: 21, number of entries: 1, with row indices in Ai [41 ... 41]:
    row indices: 42

Column: 22, number of entries: 2, with row indices in Ai [42 ... 43]:
    row indices: 23 44

Column: 23, number of entries: 2, with row indices in Ai [44 ... 45]:
    row indices: 43 46

Column: 24, number of entries: 2, with row indices in Ai [46 ... 47]:
    row indices: 25 48

Column: 25, number of entries: 2, with row indices in Ai [48 ... 49]:
    row indices: 44 50

Column: 26, number of entries: 2, with row indices in Ai [50 ... 51]:
    row indices: 27 52

Column: 27, number of entries: 2, with row indices in Ai [52 ... 53]:
    row indices: 45 54

Column: 28, number of entries: 2, with row indices in Ai [54 ... 55]:
    row indices: 29 56

Column: 29, number of entries: 2, with row indices in Ai [56 ... 57]:
    row indices: 46 58

Column: 30, number of entries: 2, with row indices in Ai [58 ... 59]:
    row indices: 31 60

Column: 31, number of entries: 2, with row indices in Ai [60 ... 61]:
    row indices: 47 62

Column: 32, number of entries: 1, with row indices in Ai [62 ... 62]:
    row indices: 33

Column: 33, number of entries: 1, with row indices in Ai [63 ... 63]:
    row indices: 48

Column: 34, number of entries: 1, with row indices in Ai [64 ... 64]:
    row indices: 35

Column: 35, number of entries: 1, with row indices in Ai [65 ... 65]:
    row indices: 49

Column: 36, number of entries: 1, with row indices in Ai [66 ... 66]:
    row indices: 37

Column: 37, number of entries: 1, with row indices in Ai [67 ... 67]:
    row indices: 50

Column: 38, number of entries: 1, with row indices in Ai [68 ... 68]:
    row indices: 39

Column: 39, number of entries: 1, with row indices in Ai [69 ... 69]:
    row indices: 51

Column: 40, number of entries: 1, with row indices in Ai [70 ... 70]:
    row indices: 41

Column: 41, number of entries: 1, with row indices in Ai [71 ... 71]:
    row indices: 52

Column: 42, number of entries: 1, with row indices in Ai [72 ... 72]:
    row indices: 43

Column: 43, number of entries: 1, with row indices in Ai [73 ... 73]:
    row indices: 53

Column: 44, number of entries: 1, with row indices in Ai [74 ... 74]:
    row indices: 45

Column: 45, number of entries: 1, with row indices in Ai [75 ... 75]:
    row indices: 54

Column: 46, number of entries: 1, with row indices in Ai [76 ... 76]:
    row indices: 47

Column: 47, number of entries: 1, with row indices in Ai [77 ... 77]:
    row indices: 55

Column: 48, number of entries: 1, with row indices in Ai [78 ... 78]:
    row indices: 49

Column: 49, number of entries: 1, with row indices in Ai [79 ... 79]:
    row indices: 56

Column: 50, number of entries: 1, with row indices in Ai [80 ... 80]:
    row indices: 51

Column: 51, number of entries: 1, with row indices in Ai [81 ... 81]:
    row indices: 57

Column: 52, number of entries: 1, with row indices in Ai [82 ... 82]:
    row indices: 53

Column: 53, number of entries: 1, with row indices in Ai [83 ... 83]:
    row indices: 58

Column: 54, number of entries: 1, with row indices in Ai [84 ... 84]:
    row indices: 55

Column: 55, number of entries: 1, with row indices in Ai [85 ... 85]:
    row indices: 59

Column: 56, number of entries: 1, with row indices in Ai [86 ... 86]:
    row indices: 57

Column: 57, number of entries: 1, with row indices in Ai [87 ... 87]:
    row indices: 60

Column: 58, number of entries: 1, with row indices in Ai [88 ... 88]:
    row indices: 59

Column: 59, number of entries: 1, with row indices in Ai [89 ... 89]:
    row indices: 61

Column: 60, number of entries: 1, with row indices in Ai [90 ... 90]:
    row indices: 61

Column: 61, number of entries: 1, with row indices in Ai [91 ... 91]:
    row indices: 62

Column: 62, number of entries: 1, with row indices in Ai [92 ... 92]:
    row indices: 63

Column: 63, number of entries: 0, with row indices in Ai [93 ... 92]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  64
    nz, number of nonzeros in A:                        93
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       186
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              6392
    # of memory compactions:                            1

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 281
    nonzeros in L (including diagonal):                 345
    # divide operations for LDL' or LU:                 281
    # multiply-subtract operations for LDL':            956
    # multiply-subtract operations for LU:              1631
    max nz. in any column of L (incl. diagonal):        12

    chol flop count for real A, sqrt counted as 1 flop: 2257
    LDL' flop count for real A:                         2193
    LDL' flop count for complex A:                      10177
    LU flop count for real A (with no pivoting):        3543
    LU flop count for complex A (with no pivoting):     15577

Permutation vector:
 22 46 29 23 53 59 54 45 27 26 55 38 15 14 63 62 31 51 56 60 57 30 39 25  0  1  2 12  6 48 33  3 24 35  5 42 21 20 10 41 17 16 18  9 37 36  8 40 34 32  4 19 49 50  7 11 13 28 43 44 52 58 61 47

Inverse permutation vector:
 24 25 26 31 50 34 28 54 46 43 38 55 27 56 13 12 41 40 42 51 37 36  0  3 32 23  9  8 57  2 21 16 49 30 48 33 45 44 11 22 47 39 35 58 59  7  1 63 29 52 53 17 60  4  6 10 18 20 61  5 19 62 15 14

Execution of AMD demo: OK
