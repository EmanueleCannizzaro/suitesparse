
===========================================================
title: [AG-Monien/cage_G_03]
status 0
key [2436G3] nrow 24 ncol 24
mkind 1 skind 1 asize 72 znz 0
mtype from file:               [psa]
(A) RBok status 0 0 0
(Z) RBok status 0 0 0
mtype from examining matrix:   [psa]
mtype after reading from file: [psa]
raw nrow 24 ncol 24 nnz 36 nelnz 0 xsize 0
mtype from raw read from file: [pua]
(P) RBok status 0 0 0
mtype of pattern:              [psa]
mtype of tril(A):              [pua]
(L) RBok status 0 0 0


AMD demo:

Approximate minimum degree ordering
    dense row parameter: 10
    (rows with more than max (10 * sqrt (n), 16) entries are
    considered "dense", and placed last in output permutation)
    aggressive absorption:  yes

Input matrix:  24-by-24, with 36 entries.
   Note that for a symmetric matrix such as this one, only the
   strictly lower or upper triangular parts would need to be
   passed to AMD, since AMD computes the ordering of A+A'.  The
   diagonal entries are also not needed, since AMD ignores them.

Column: 0, number of entries: 3, with row indices in Ai [0 ... 2]:
    row indices: 1 2 3

Column: 1, number of entries: 2, with row indices in Ai [3 ... 4]:
    row indices: 4 5

Column: 2, number of entries: 2, with row indices in Ai [5 ... 6]:
    row indices: 6 7

Column: 3, number of entries: 2, with row indices in Ai [7 ... 8]:
    row indices: 8 9

Column: 4, number of entries: 2, with row indices in Ai [9 ... 10]:
    row indices: 10 11

Column: 5, number of entries: 2, with row indices in Ai [11 ... 12]:
    row indices: 12 13

Column: 6, number of entries: 2, with row indices in Ai [13 ... 14]:
    row indices: 14 15

Column: 7, number of entries: 2, with row indices in Ai [15 ... 16]:
    row indices: 16 17

Column: 8, number of entries: 2, with row indices in Ai [17 ... 18]:
    row indices: 18 19

Column: 9, number of entries: 2, with row indices in Ai [19 ... 20]:
    row indices: 20 21

Column: 10, number of entries: 2, with row indices in Ai [21 ... 22]:
    row indices: 14 18

Column: 11, number of entries: 2, with row indices in Ai [23 ... 24]:
    row indices: 16 20

Column: 12, number of entries: 2, with row indices in Ai [25 ... 26]:
    row indices: 15 19

Column: 13, number of entries: 2, with row indices in Ai [27 ... 28]:
    row indices: 17 21

Column: 14, number of entries: 1, with row indices in Ai [29 ... 29]:
    row indices: 21

Column: 15, number of entries: 1, with row indices in Ai [30 ... 30]:
    row indices: 22

Column: 16, number of entries: 1, with row indices in Ai [31 ... 31]:
    row indices: 19

Column: 17, number of entries: 1, with row indices in Ai [32 ... 32]:
    row indices: 23

Column: 18, number of entries: 1, with row indices in Ai [33 ... 33]:
    row indices: 23

Column: 19, number of entries: 0, with row indices in Ai [34 ... 33]:
    row indices:

Column: 20, number of entries: 1, with row indices in Ai [34 ... 34]:
    row indices: 22

Column: 21, number of entries: 0, with row indices in Ai [35 ... 34]:
    row indices:

Column: 22, number of entries: 1, with row indices in Ai [35 ... 35]:
    row indices: 23

Column: 23, number of entries: 0, with row indices in Ai [36 ... 35]:
    row indices:

return value from amd_order: 0 (should be 0)

Results:
    status: OK
    n, dimension of A:                                  24
    nz, number of nonzeros in A:                        36
    symmetry of A:                                      0.0000
    number of nonzeros on diagonal:                     0
    nonzeros in pattern of A+A' (excl. diagonal):       72
    # dense rows/columns of A+A':                       0
    memory used, in bytes:                              1208
    # of memory compactions:                            0

    The following approximate statistics are for a subsequent
    factorization of A(P,P) + A(P,P)'.  They are slight upper
    bounds if there are no dense rows/columns in A+A', and become
    looser if dense rows/columns exist.

    nonzeros in L (excluding diagonal):                 91
    nonzeros in L (including diagonal):                 115
    # divide operations for LDL' or LU:                 91
    # multiply-subtract operations for LDL':            255
    # multiply-subtract operations for LU:              419
    max nz. in any column of L (incl. diagonal):        9

    chol flop count for real A, sqrt counted as 1 flop: 625
    LDL' flop count for real A:                         601
    LDL' flop count for complex A:                      2859
    LU flop count for real A (with no pivoting):        929
    LU flop count for complex A (with no pivoting):     4171

Permutation vector:
  3  0 15  6  5 21 13  7 19 16 20 23 10  4 18  1  2  9 11 12 14 17 22  8

Inverse permutation vector:
  1 15 16  0 13  4  3  7 23 17 12 18 19  6 20  2  9 21 14  8 10  5 22 11

Execution of AMD demo: OK
